<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ilife]]></title>
  <link href="www.ilife.co/atom.xml" rel="self"/>
  <link href="www.ilife.co/"/>
  <updated>2017-05-05T13:09:35+08:00</updated>
  <id>www.ilife.co/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Day 5]]></title>
    <link href="www.ilife.co/14942273079219.html"/>
    <updated>2017-05-08T15:08:27+08:00</updated>
    <id>www.ilife.co/14942273079219.html</id>
    <content type="html"><![CDATA[
<p>From today I wanna focus on play with data. And I choose python. </p>

<p><img src="media/14942273079219/14944015699868.png" alt=""/></p>

<p><a href="http://www.python-course.eu/numpy.php">image from python-course.eu</a><br/>
As the image shows, I choose to learn Numpy, Matplotlib and Pandas first. Then the Scipy.</p>

<p><strong>Numpy</strong>  Numpy is the core library for scientific computing in Python</p>

<p><strong>Pandas</strong> Based on Numpy, the key object is Series, DataFrame.</p>

<p><strong>Matplotlib</strong> For data visualization.</p>

<p><strong>Scipy</strong> Numpy provides a high-performance multidimensional array and basic tools to compute with and manipulate these arrays. SciPy builds on this, and provides a large number of functions that operate on numpy arrays and are useful for different types of scientific and engineering applications.</p>

<p>Great reference website <a href="https://docs.scipy.org/">scipy.org</a><br/>
<em>PS: try to dive into a real project, play and manipulate stock data.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 4]]></title>
    <link href="www.ilife.co/14939091658025.html"/>
    <updated>2017-05-04T22:46:05+08:00</updated>
    <id>www.ilife.co/14939091658025.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Learning play with Ubuntu server(16.04)</h2>

<p>Now I decide to deploy two website on my Ubuntu server. So first I should configure the apache2 to make it happens.</p>

<h3 id="toc_1">Configure apache2</h3>

<p>Useful command</p>

<pre><code class="language-shell"># check apache setting 
apache2ctl configtest
# start restart stop apache server
service apache2 start | restart | stop
</code></pre>

<p>Apache2 conf</p>

<pre><code class="language-shell">&lt;VirtualHost *:80&gt;
    ServerAdmin ***@***.com
    ServerName ***.com
    ServerAlias www.***.com
    DocumentRoot /var/www/***
    ErrorLog ${APACHE_LOG_DIR}/error.log
&lt;/VirtualHost&gt;
</code></pre>

<h3 id="toc_2">Install &amp; Congifuring MySQL</h3>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04">Ref</a></p>

<p><strong>Install script</strong></p>

<pre><code class="language-shell">sudo apt-get update
sudo apt-get install mysql-server
</code></pre>

<p><strong>Configuring MySQL</strong></p>

<pre><code class="language-shell">sudo mysql_secure_installation
</code></pre>

<p><strong>Enable Remote Access</strong></p>

<pre><code class="language-shell">vim /etc/mysql/mysql.conf.d/mysqld.cnf
# comment the following line
# bind-address          = 127.0.0.1 
# Save the file. 
# restart service
service mysql restart
</code></pre>

<p><strong>Other Useful command</strong></p>

<pre><code class="language-shell"># login
mysql -u root -p
# test 
systemctl status mysql.service
mysqladmin -p -u root version
# see port state
netstat -an | grep 3306
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 3]]></title>
    <link href="www.ilife.co/14938636429090.html"/>
    <updated>2017-05-04T10:07:22+08:00</updated>
    <id>www.ilife.co/14938636429090.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Android with Jenkins</h2>

<p>Trying to develop project using CI just cause I think it&#39;s a better way to maintain or tracking project progress.</p>

<h3 id="toc_1">Instal Jenkins</h3>

<p>Just follow the official documentations.</p>

<h3 id="toc_2">Prepare Android Build Environment</h3>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-build-android-apps-with-jenkins">Ref</a></p>

<pre><code class="language-shell">cd /opt
# Download SDK tools
wget https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
# Uncompress it
unzip sdk-tools-linux-3859397.zip
# delete it
rm -rf sdk-tools-linux-3859397.zip
# goto tools folder
cd tools
# List installed and available packages
./sdkmanager --list
# Install packages
./sdkmanager &quot;platforms;android-25&quot;
./sdkmanager &quot;build-tools;25.0.2&quot;
# move platforms tools build-tools to one folder
mv platforms android-sdk 
mv tools android-sdk 
mv build-tools android-sdk 
# give Jenkins permission to reach android-sdk
chmod -R 777 /opt/android-sdk
# Set environment variables
vim /etc/profile.d/android.sh
# In vim editor input following text
# export ANDROID_HOME=&quot;/opt/android-sdk&quot;
# export PATH=&quot;$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH&quot;
# then save
# Reload and activate the variables
source /etc/profile
</code></pre>

<h4 id="toc_3">Configuring the JDK</h4>

<p><em>Manage Jenkins</em> -&gt; <em>Global Tool Configuration</em><br/>
<img src="media/14938636429090/14938889651545.jpg" alt=""/></p>

<h4 id="toc_4">Configuring the Android SDK</h4>

<p>To build your project, the Android SDK will need a few packages. First, update the SDK itself(a few licenses will need to be accepted):</p>

<pre><code class="language-shell"># Now android has been deprecated, should use sdkmanager/avdmanager instead.
android update sdk --no-ui
</code></pre>

<p>This will install : </p>

<pre><code>  emulator             | 26.0.0  | Android Emulator               | emulator/
  patcher;v4           | 1       | SDK Patch Applier v4           | patcher/v4/
  platform-tools       | 25.0.5  | Android SDK Platform-Tools     | platform-tools/
</code></pre>

<h4 id="toc_5">Configure Gradle plugin</h4>

<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Gradle+Plugin">Ref</a><br/>
<em>Must configure this, or you may get a &#39;Cannot run program “gradle” in Jenkins&#39; error</em><br/>
In the ** Global Tool Configuration.** <br/>
<img src="media/14938636429090/14938764037563.jpg" alt=""/></p>

<p>Or can manually download and configure it. <br/>
<img src="media/14938636429090/14938816607621.jpg" alt=""/></p>

<h3 id="toc_6">Jenkins Item setting</h3>

<p>Using wrapper. The <code>**/*.apk</code> part make sure we can get the build result.</p>

<p><img src="media/14938636429090/14938891045380.jpg" alt=""/></p>

<h3 id="toc_7">Other things should be careful</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/38096225/automatically-accept-all-sdk-licences/38381577">How to accept SDK licences</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 2]]></title>
    <link href="www.ilife.co/14931140045313.html"/>
    <updated>2017-04-25T17:53:24+08:00</updated>
    <id>www.ilife.co/14931140045313.html</id>
    <content type="html"><![CDATA[
<p>Try to implement Decimal to Hex.</p>

<pre><code class="language-java">
public static void main(String[] args) {
   int n = 4123;

   int power = 1;
   while (power &lt;= (n / 16)) {
       power *= 16;
   }

   while (power &gt; 0) {
       if (n &gt;= power) {
           hexOutput(n, power);
           n = n - power;
       }else {
           hexOutput(n, power);
       }
       power = power / 16;
   }
}

private static void hexOutput(int n, int power) {
   switch (n / power) {
       case 15:
           System.out.println(&quot;F&quot;);
           break;
       case 14:
           System.out.println(&quot;E&quot;);
           break;
       case 13:
           System.out.println(&quot;D&quot;);
           break;
       case 12:
           System.out.println(&quot;C&quot;);
           break;
       case 11:
           System.out.println(&quot;B&quot;);
           break;
       case 10:
           System.out.println(&quot;A&quot;);
           break;
       default:
           System.out.println(n / power);
   }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 1]]></title>
    <link href="www.ilife.co/14929392382338.html"/>
    <updated>2017-04-23T17:20:38+08:00</updated>
    <id>www.ilife.co/14929392382338.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">RxJava</h2>

<blockquote>
<p>The Observer pattern done right. ReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming.      — ractivex.io</p>
</blockquote>

<p>Upon  this, it&#39;s obvious that we should first familiar the Observer pattern, the Iterator pattern and the functional programming. I think I&#39;ll cover these three part later. </p>

<p>The Java version of this concept is called RxJava, which hosted on Github <a href="https://github.com/ReactiveX/RxJava">RxJava</a></p>

<h2 id="toc_1">Main Concept</h2>

<ul>
<li><strong>Observables</strong> Representing sources of data. </li>
<li><strong>Subscribers (Observers)</strong> Listening to the Observables. </li>
<li>a set of methods for modifying and composing the data</li>
</ul>

<p>Some advantages of RxJava:<br/>
* You can chain async operations, e.g. if a API call depends on the call of another API<br/>
* A defined way to handle errors<br/>
* It reduces the need fro state variables, which can be the source of errors == Creating sources, subscribing to them and disposing them</p>

<h2 id="toc_2">Creating sources to observe</h2>

<p>Observables are the sources for the data. Usually they start providing data once a subscriber starts listening. They can produce an empty, a single or multiple items. They can terminate with an error or success. Sources may never terminate, e.g., a observable for a button click can potentially produce an infinite stream of events. </p>

<p><em>Table 1. Table Observable types</em></p>

<table>
<thead>
<tr>
<th>Type</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>Flowable<T></td>
<td>Emits 0 or n items and terminates with complete or an error. Supports backpressure, which allows to control how fast a source emits items.</td>
</tr>
<tr>
<td>Observable<T></td>
<td>Emits 0 or n items and terminates with complete or an error.</td>
</tr>
<tr>
<td>Single<T></td>
<td>Emits either a single item or an error. The reactive version of a <code>method call</code>. you subscribe to a Single and you get either a return value or an error.</td>
</tr>
<tr>
<td>Maybe<T></td>
<td>Succeeds with an item, or no item, or errors. The reactive version of an <code>Optional</code>.</td>
</tr>
<tr>
<td>Completeable</td>
<td>Either completes or returns an error. It never return items. The reactive version of a <code>Runnable</code>.</td>
</tr>
</tbody>
</table>

<p>An example for the usage of <code>backpressure</code> is when you process <code>touch events</code>. You cannot control the user who is doing these touch events, but you can tell the source to emit the events on a slower rate in case you cannot processes them at the rate the user produces them. This has been designed for the support fro reactive streams. Only <code>Flowable</code> supports backpressure.</p>

<pre><code class="language-java">Observable&lt;Interger&gt; observable = Observable.create(new ObserverableOnSubscribe&lt;Integer&gt;(){
    @Override
    public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; observableEmitter) throws Exception {
        observableEmitter.onNext(1);
        observableEmitter.onNext(2);
        observableEmitter.onNext(3);
        observableEmitter.onComplete();
    }
});

Observer&lt;Integer&gt; observer = new Observer&lt;Integer&gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                System.out.println(&quot;On Subscribe&quot;);
            }

            @Override
            public void onNext(Integer value) {
                System.out.println(&quot;On Next&quot; + value);
            }

            @Override
            public void onError(Throwable e) {
                System.out.println(&quot;On Error&quot;);
            }

            @Override
            public void onComplete() {
                System.out.println(&quot;On Complete&quot;);
            }
        };

        observable.subscribe(observer);
</code></pre>

]]></content>
  </entry>
  
</feed>
